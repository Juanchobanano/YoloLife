<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Variables de control.
opciones = 0;
animar_bloques = 0;
barras_fuera = 0;
barras_dentro = 0;
comenzar_opciones = 0;

// Determinar cuantas opciones ahi.
for(i = 0; i &lt; 5; i++){
    if(ds_list_find_value(opciones_menu,i) != ""){
        opciones++;
    }
}

if(pantalla_menu == 0){
    // Crear Men√∫ Principal.
    titulo = instance_create(0,0,obj_titulo);
    with(titulo){ x = room_width/2 - sprite_width/2; y = 130; };
    
    start = instance_create(0,0,obj_press);
    with(start){ 
        x = room_width/2 - sprite_width/2; y = 270; 
        image_speed = .3;
        image_index = 0;
    };
}else{
    titulo = instance_create(0,0,obj_titulo);
    with(titulo) { x = room_width/2 - sprite_width/2; y = 40; }
}

copy = instance_create(0,0,obj_copyright);
with(copy) { x = room_width/2 - sprite_width/2; y = 425; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(barra[4]){ animar_salida = 1; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(barra[3]){ animar_salida = 1; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(barra[2]){ animar_salida = 1; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(barra[1]){ animar_salida = 1; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(barra[0]){ animar_salida = 1; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Animar bloques a salir.

if(animar_bloques){
    for(i = 0; i &lt; opciones; i++){
        alarm[i] = 1+5*i;
    }
    animar_bloques = 0;
}

//show_debug_message('pantalla menu ' + string(pantalla_menu));

// Si no es la pantalla de presentacion.
if(pantalla_menu != 0){ 
    
        // Si ya se movio la opcion.
        if((saliendo and barra[opciones-1].x &lt; 0) or (volver_menu)){
        
            sucesion = 0; // Reiniciar variable de control de tiempos de entrada.
            saliendo = 0; // Reiniciar variable saliendo.
            volver_menu = 0; // Reiniciar variable volver menu.

            // Este condicional revisa que  la opcion escogida no requiere cambiar de room sino de pantalla en la misma room.
            if(opcion_seleccionada != "adventure" and opcion_seleccionada != "challenge" and opcion_seleccionada != "shop" 
               and opcion_seleccionada != "jugar" and opcion_seleccionada != "continuar" and opcion_seleccionada != "highscore"){ 
               
                // Crear pregunta.
                /*if(instance_exists(obj_pregunta)){
                    instance_destroy();
                }*/
                
                //pregunta = instance_create(room_width/2 - sprite_get_width(spr_pregunta)/2, 65, obj_pregunta);
                //with(pregunta){ image_alpha = 0; animar = 1; } // Dejar la pregunta invisible.
            
                // Reiniciar opciones.
                opciones = 0;
                                         
                switch(pantalla_menu){
                    case 2: // Dificultad
                        /*if(idioma == "es"){
                            with(pregunta){ image_index = 0; }
                        }else if(idioma == "en"){
                            with(pregunta){ image_index = 1; }
                        }*/
                        ds_list_replace(opciones_menu,0,"dificil");
                        ds_list_replace(opciones_menu,1,"normal");
                        ds_list_replace(opciones_menu,2,"facil");
                        ds_list_replace(opciones_menu,3,"");
                        ds_list_replace(opciones_menu,4,"");
                    break;
                    case 3: // Menu Juego.

                        ds_list_replace(opciones_menu,0,"story");
                        ds_list_replace(opciones_menu,1,"adventure");
                        ds_list_replace(opciones_menu,2,"shop");
                        ds_list_replace(opciones_menu,3,"settings");
                        ds_list_replace(opciones_menu,4,"");
                    break;
                    case 4: // Menu Story
                        /*if(idioma == "es"){
                            with(pregunta){ image_index = 2; }
                        }else if(idioma == "en"){
                            with(pregunta){ image_index = 3; }
                        }*/
                        ds_list_replace(opciones_menu,0,"jugar");
                        ds_list_replace(opciones_menu,1,"continuar");
                        ds_list_replace(opciones_menu,2,"highscore");
                        ds_list_replace(opciones_menu,3,"back");
                        ds_list_replace(opciones_menu,4,"");
                    break;
                    case 5: // Settings.
                        /*if(idioma == "es"){
                            with(pregunta){ image_index = 4; }
                        }else if(idioma == "en"){
                            with(pregunta){ image_index = 5; }
                        }*/
                        
                        if(idioma == "en"){
                             ds_list_replace(opciones_menu,0,"ingles");
                        }else if(idioma == "es"){
                             ds_list_replace(opciones_menu,0,"espanol");
                        }
                        
                        /*switch(dificultad){
                            case "dificil":
                                ds_list_replace(opciones_menu,1,"dificil");
                            break;
                            case "normal":
                                ds_list_replace(opciones_menu,1,"normal");
                            break;
                            case "facil":
                                ds_list_replace(opciones_menu,1,"facil");
                            break;
                        }*/
                    
                        ds_list_replace(opciones_menu,1,"musica");
                        ds_list_replace(opciones_menu,2,"pads");
                        ds_list_replace(opciones_menu,3,"back");
                    break;
                }
                
                // Determinar cuantas opciones ahi.
                for(i = 0; i &lt; 5; i++){
                    if(ds_list_find_value(opciones_menu,i) != ""){
                        opciones++;
                    }
                }
                
                for(i = 0; i &lt; opciones; i++){
                    // Crear barra.
                    barra[i] = instance_create(0,180,obj_barra);
                    // Asignar lugar de creacion dependiendo de la variable salida.                      
                    with(barra[i]){ x = -sprite_width; }
                    // Asignarle un valor a la variable interna opcion_menu y cambiar su Y.
                    switch(i){
                        case 0:
                            with(barra[0]){ 
                                opcion_menu = ds_list_find_value(opciones_menu,0); y = 180;
                            }
                        break;
                        case 1:
                            with(barra[1]){ 
                                opcion_menu = ds_list_find_value(opciones_menu,1); y = 230;
                            }
                        break;
                        case 2:
                            with(barra[2]){ 
                                opcion_menu = ds_list_find_value(opciones_menu,2); y = 280;
                            }
                        break;
                        case 3:
                            with(barra[3]){ 
                                opcion_menu = ds_list_find_value(opciones_menu,3); y = 330;
                            }
                        break;
                        case 4:
                            with(barra[4]){
                                opcion_menu = ds_list_find_value(opciones_menu,3); y = 370;
                            }
                        break;
                    } 
                } 
                
            // La opcion escogida hace que el juego cambia de room.
            }else{ 
                switch(opcion_seleccionada){
                    case "adventure":
                        if(!pausarmusica){
                            audio_sound_gain(sn_musica2,0,1600);
                            audio_stop_sound(sn_musica);
                            audio_play_sound(sn_musica,1,1);
                            audio_sound_gain(sn_musica,0,0);
                            audio_sound_gain(sn_musica,1,6000);
                        }
                        src_trans(Room_Adventure);
                        res = 1;
                        aventura = 1;                      
                    break;
                    case "challenge":
                        estado = 5;
                        res=1;
                        reto = 1;
                        //src_trans(game1c);
                        if(!pausarmusica){
                            audio_sound_gain(sn_musica2,0,1600);
                            audio_stop_sound(sn_challenge);
                            audio_play_sound(sn_challenge,1,1);
                            audio_sound_gain(sn_challenge,0,0);
                            audio_sound_gain(sn_challenge,1,6000);
                        }
                        src_trans(Room_Mensajes);                    
                    break;
                    case "shop":
                
                    break;
                    case "jugar":
                       res=1;
                       src_trans(Room_Mensajes);                
                    break;
                    case "continuar":
                       res = 1;
                       if(file_exists(working_directory + "Datos.sav")){
                            src_trans(SavedRoom);
                       }else{
                            src_trans(Room_Mensajes);
                       }
                       audio_play_sound(sn_win,1,0);                    
                    break;
                }
                opcion_seleccionada = ""; // Se limpia la opcion seleccionada.
                pantalla_menu = 3;
            }
        }
    //} 
}else{ 
    // Esta es la pantalla de presentacion.
    if(comenzar_opciones){
        for(i = 0; i &lt; opciones; i++){
            // Crear barra. 
            barra[i] = instance_create(0,0,obj_barra);       
            // Asignar lugar de creacion dependiendo de la variable salida.                      
            with(barra[i]){ x = -sprite_width; }
            // Asignarle un valor a la variable interna opcion_menu y cambiar su Y.
            switch(i){
                case 0:
                    with(barra[0]){ 
                        opcion_menu = ds_list_find_value(opciones_menu,0); y = 180;
                    }
                break;
                case 1:
                    with(barra[1]){ 
                        opcion_menu = ds_list_find_value(opciones_menu,1); y = 230;
                    }
                break;
                case 2:
                    with(barra[2]){ 
                        opcion_menu = ds_list_find_value(opciones_menu,2); y = 280;                        
                    }
                break;
                case 3:
                    with(barra[3]){ 
                        opcion_menu = ds_list_find_value(opciones_menu,3); y = 330; 
                    }
                break;
                case 4:
                    with(barra[4]){
                        opcion_menu = ds_list_find_value(opciones_menu,3); y = 370;
                    }
                break;
            } 
        }
        comenzar_opciones = 0;
        if(opciones &lt; 4){
            pantalla_menu++;
        }else{
            pantalla_menu = 3;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//promocion = irandom_range(0,2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(noone);
draw_set_color(c_black);

switch(pantalla_menu){
    case 4:

        draw_set_font(font_adventure);
        draw_set_color(c_black);

        
        if(file_exists(working_directory + "Datos.sav") and !final){
            if(idioma == "en"){ 
                draw_text(room_width/2 + 95,175,"PROGRESS");
                draw_set_font(font_menu);
                draw_text(room_width/2+85,225,"Level " + string(Rooms) + " with# " + string(Muertes) + " deaths.");
            }else if(idioma == "es"){
                draw_text(room_width/2 + 95,195,"PROGRESO");
                draw_set_font(font_menu);
                draw_text(room_width/2+85,225,"Nivel " + string(Rooms) + " con# " + string(Muertes) + " muertes.");
            }
        }else if(file_exists(working_directory + "Datos.sav") and final){
            if(idioma == "en"){
                draw_text(room_width/2 + 95,195,"PROGRESS");
                draw_set_font(font_menu);
                draw_text(room_width/2+85,225,"Game Complete with# " + string(Muertes) + " deaths!");
            }else if(idioma == "es"){
                draw_text(room_width/2 + 95,195,"PROGRESO");
                draw_set_font(font_menu);
                draw_text(room_width/2+85,225,"Juego completo con# " + string(Muertes) + " muertes!");
            }
        }
        
    break;
    case 3: // Challenge Winners.
        //if(!instance_exists(obj_ninjamoo)){
         //   instance_create(380,193,obj_ninjamoo);
    //}    
        switch(promocion){
            case 0:
                draw_sprite(spr_ninjamoo,0,380,193);
                
                if(mouse_check_button_pressed(mb_left) and mouse_x&gt;=380 and mouse_x&lt;=380 + sprite_get_width(spr_ninjamoo) 
                 and mouse_y &gt;= 193 and mouse_y &lt;= 193 + sprite_get_height(spr_ninjamoo)){
                    if(idioma == "en"){
                        if(show_question("Please, vote for Ninja Moo! Ninja Moo is a game developed by Max Terraria, a great friend of ours who needs our help!")){
                            url_open("http://steamcommunity.com/sharedfiles/filedetails/?id=526592074");
                        }
                    }else if(idioma == "es"){
                        if(show_question("Porfavor, vota por Ninja Moo! Ninja Moo es un juego desarrollado por Max Terraria, un gran amigo de nosotros que necesita nuestro apoyo!")){
                            url_open("http://steamcommunity.com/sharedfiles/filedetails/?id=526592074");
                        }
                    }
                 }
                 
            break;
            case 1:
                draw_set_font(font_menu);
                if(idioma == "en"){
                    draw_text(100,193,"
                    Challenge Week#
                    Winners# 
                    conmemorative#
                    levels are#
                    available!");
                }else if(idioma == "es"){
                    draw_text(100,193,"
                    Ganadores del nivel#
                    retador! Encuentra#
                    sus niveles en el#
                    modo Aventura!"
                    );
                }
                 
            break;
            case 2: // Challenge Winner. 
        
                 draw_set_font(font_menu);
                 draw_set_color(c_white);
                 draw_text(380,180,"Yolo Life - Game Play");
                 draw_sprite(spr_cristhian,0,380,204);
                
                 if(mouse_check_button_pressed(mb_left) and mouse_x&gt;=380 and mouse_x&lt;=380 + sprite_get_width(spr_cristhian) 
                 and mouse_y &gt;= 209 and mouse_y &lt;= 209 + sprite_get_height(spr_cristhian)){
                    url_open("https://www.youtube.com/watch?v=gXRKI3xbKK0");
                 }
            break;
        }
    
    /*    switch(promocion){
            case 0: // Ninja Moo.
                show_debug_message('mooo');
                
                draw_sprite(spr_ninjamoo,0,380,193);
                if(mouse_check_button_pressed(mb_left) and mouse_x&gt;=380 and mouse_x&lt;=380 + sprite_get_width(spr_cristhian) 
                and mouse_y &gt;= 139 and mouse_y &lt;= 139 + sprite_get_height(spr_cristhian)){
                     if(idioma == "en"){
                        if(show_question("Please, vote for Ninja Moo! Ninja Moo is a game developed by Max Terraria, a great friend of ours who needs our help!")){
                                url_open("http://steamcommunity.com/sharedfiles/filedetails/?id=526592074");
                            }
                        }else if(idioma == "es"){
                            if(show_question("Porfavor, vota por Ninja Moo! Ninja Moo es un juego desarrollado por Max Terraria, un gran amigo de nosotros que necesita nuestro apoyo!")){
                                url_open("http://steamcommunity.com/sharedfiles/filedetails/?id=526592074");
                            }
                        }
                }
                
            case 1: // Cristhian.
                show_debug_message('CRISTHIAN');
            
                draw_set_font(font_menu);
                draw_text(380,193,"Yolo Life - Game Play");
                draw_sprite(spr_cristhian,0,380,197);
                
                if(mouse_check_button_pressed(mb_left) and mouse_x&gt;=380 and mouse_x&lt;=380 + sprite_get_width(spr_cristhian) 
                and mouse_y &gt;= 139 and mouse_y &lt;= 139 + sprite_get_height(spr_cristhian)){
                    url_open("https://www.youtube.com/watch?v=gXRKI3xbKK0");
                }
                
            break;
            case 2: // Challenge Winner. 
                show_debug_message('challenge winnners');
                draw_set_font(font_menu);
                if(idioma == "en"){
                    draw_text(100,193,"
                    Challenge Week#
                    Winners# 
                    conmemorative#
                    levels are#
                    available!");
                }else if(idioma == "es"){
                    draw_text(100,193,"
                    Ganadores del nivel#
                    retador! Encuentra#
                    sus niveles en el#
                    modo Aventura!"
                    );
                }
            break;
        }
        
        show_debug_message(promocion);
*/
    
        /*if(idioma == "en"){
            draw_set_font(font_menu);
            draw_text(
            room_width/2 - 200,
            175,
            "
            Conmemorative levels#
            will be available on#
            Nov 27!#
            Winners: Juan Camacho,#
            Diana Barrangan, Juan#
            Pineda!
            "
            )
        }else if(idioma == "es"){
            draw_set_font(font_menu);
            draw_text(
            room_width/2 - 200,
            175,
            "
            Los niveles conmemorativos#
            estaran disponibles el#
            viernes 27 de Noviembre!#
            
            Ganadores: Juan Camacho,#
            Diana Barragan, Juan# 
            Pineda!
            "
            )
        }*/
    break;
    case 5: // Settings.

    
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
